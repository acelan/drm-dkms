From ae730e2a4589f11e7fae03e0cb99f2b045b9ba8c Mon Sep 17 00:00:00 2001
From: Timo Aaltonen <tjaalton@debian.org>
Date: Tue, 17 Mar 2015 09:39:26 +0200
Subject: [PATCH] SAUCE: i915_bpo: Add i915_bpo_*() calls for i915

used by intel_ips driver
---
 drivers/gpu/drm/i915/i915_pci.c |  9 ++++++++-
 drivers/gpu/drm/i915/intel_pm.c | 30 +++++++++++++++---------------
 2 files changed, 23 insertions(+), 16 deletions(-)

--- a/drivers/gpu/drm/i915/i915_pci.c
+++ b/drivers/gpu/drm/i915/i915_pci.c
@@ -26,6 +26,8 @@
 
 #include "i915_drv.h"
 
+extern int i915_bpo_enabled;
+
 #define GEN_DEFAULT_PIPEOFFSETS \
 	.pipe_offsets = { PIPE_A_OFFSET, PIPE_B_OFFSET, \
 			  PIPE_C_OFFSET, PIPE_EDP_OFFSET }, \
@@ -411,6 +413,7 @@ extern int i915_driver_load(struct pci_d
 
 static int i915_pci_probe(struct pci_dev *pdev, const struct pci_device_id *ent)
 {
+	int ret;
 	struct intel_device_info *intel_info =
 		(struct intel_device_info *) ent->driver_data;
 
@@ -428,7 +431,11 @@ static int i915_pci_probe(struct pci_dev
 	if (PCI_FUNC(pdev->devfn))
 		return -ENODEV;
 
-	return i915_driver_load(pdev, ent);
+	ret = i915_driver_load(pdev, ent);
+
+	if (!ret)
+		i915_bpo_enabled = 1;
+	return ret;
 }
 
 extern void i915_driver_unload(struct drm_device *dev);
--- a/drivers/gpu/drm/i915/intel_pm.c
+++ b/drivers/gpu/drm/i915/intel_pm.c
@@ -6500,12 +6500,12 @@ unsigned long i915_gfx_val(struct drm_i9
 }
 
 /**
- * i915_read_mch_val - return value for IPS use
+ * i915_bpo_read_mch_val - return value for IPS use
  *
  * Calculate and return a value for the IPS driver to use when deciding whether
  * we have thermal and power headroom to increase CPU or GPU power budget.
  */
-unsigned long i915_read_mch_val(void)
+unsigned long i915_bpo_read_mch_val(void)
 {
 	struct drm_i915_private *dev_priv;
 	unsigned long chipset_val, graphics_val, ret = 0;
@@ -6525,14 +6525,14 @@ out_unlock:
 
 	return ret;
 }
-EXPORT_SYMBOL_GPL(i915_read_mch_val);
+EXPORT_SYMBOL_GPL(i915_bpo_read_mch_val);
 
 /**
- * i915_gpu_raise - raise GPU frequency limit
+ * i915_bpo_gpu_raise - raise GPU frequency limit
  *
  * Raise the limit; IPS indicates we have thermal headroom.
  */
-bool i915_gpu_raise(void)
+bool i915_bpo_gpu_raise(void)
 {
 	struct drm_i915_private *dev_priv;
 	bool ret = true;
@@ -6552,15 +6552,15 @@ out_unlock:
 
 	return ret;
 }
-EXPORT_SYMBOL_GPL(i915_gpu_raise);
+EXPORT_SYMBOL_GPL(i915_bpo_gpu_raise);
 
 /**
- * i915_gpu_lower - lower GPU frequency limit
+ * i915_bpo_gpu_lower - lower GPU frequency limit
  *
  * IPS indicates we're close to a thermal limit, so throttle back the GPU
  * frequency maximum.
  */
-bool i915_gpu_lower(void)
+bool i915_bpo_gpu_lower(void)
 {
 	struct drm_i915_private *dev_priv;
 	bool ret = true;
@@ -6580,14 +6580,14 @@ out_unlock:
 
 	return ret;
 }
-EXPORT_SYMBOL_GPL(i915_gpu_lower);
+EXPORT_SYMBOL_GPL(i915_bpo_gpu_lower);
 
 /**
- * i915_gpu_busy - indicate GPU business to IPS
+ * i915_bpo_gpu_busy - indicate GPU business to IPS
  *
  * Tell the IPS driver whether or not the GPU is busy.
  */
-bool i915_gpu_busy(void)
+bool i915_bpo_gpu_busy(void)
 {
 	struct drm_i915_private *dev_priv;
 	struct intel_engine_cs *engine;
@@ -6606,15 +6606,15 @@ out_unlock:
 
 	return ret;
 }
-EXPORT_SYMBOL_GPL(i915_gpu_busy);
+EXPORT_SYMBOL_GPL(i915_bpo_gpu_busy);
 
 /**
- * i915_gpu_turbo_disable - disable graphics turbo
+ * i915_bpo_gpu_turbo_disable - disable graphics turbo
  *
  * Disable graphics turbo by resetting the max frequency and setting the
  * current frequency to the default.
  */
-bool i915_gpu_turbo_disable(void)
+bool i915_bpo_gpu_turbo_disable(void)
 {
 	struct drm_i915_private *dev_priv;
 	bool ret = true;
@@ -6636,7 +6636,7 @@ out_unlock:
 
 	return ret;
 }
-EXPORT_SYMBOL_GPL(i915_gpu_turbo_disable);
+EXPORT_SYMBOL_GPL(i915_bpo_gpu_turbo_disable);
 
 /**
  * Tells the intel_ips driver that the i915 driver is now loaded, if
